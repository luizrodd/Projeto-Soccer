// <auto-generated />
using System;
using Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(TemplateContext))]
    partial class TemplateContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIzinha.Entitites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Championship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Rounds")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Championships", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChampionshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultTeamOne")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("ResultTeamTwo")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.GameStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("GameStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Agendado"
                        },
                        new
                        {
                            Id = 2,
                            GameId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Em andamento"
                        },
                        new
                        {
                            Id = 3,
                            GameId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Intervalo"
                        },
                        new
                        {
                            Id = 4,
                            GameId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Finalizado"
                        },
                        new
                        {
                            Id = 5,
                            GameId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Interrompido"
                        },
                        new
                        {
                            Id = 6,
                            GameId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Adiado"
                        },
                        new
                        {
                            Id = 7,
                            GameId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Abandonado"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChampionshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("TeamOneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamTwoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.HasIndex("TeamOneId")
                        .IsUnique();

                    b.HasIndex("TeamTwoId")
                        .IsUnique();

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Game", b =>
                {
                    b.HasOne("Domain.Entitites.Championship", null)
                        .WithMany("GamesList")
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitites.GameStatus", b =>
                {
                    b.HasOne("Domain.Entitites.Game", null)
                        .WithOne("GameStatus")
                        .HasForeignKey("Domain.Entitites.GameStatus", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitites.News", b =>
                {
                    b.HasOne("Domain.Entitites.Team", null)
                        .WithMany("NewsList")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitites.Team", b =>
                {
                    b.HasOne("Domain.Entitites.Championship", null)
                        .WithMany("TeamsList")
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Game", null)
                        .WithOne("TeamOne")
                        .HasForeignKey("Domain.Entitites.Team", "TeamOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Game", null)
                        .WithOne("TeamTwo")
                        .HasForeignKey("Domain.Entitites.Team", "TeamTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitites.Championship", b =>
                {
                    b.Navigation("GamesList");

                    b.Navigation("TeamsList");
                });

            modelBuilder.Entity("Domain.Entitites.Game", b =>
                {
                    b.Navigation("GameStatus")
                        .IsRequired();

                    b.Navigation("TeamOne")
                        .IsRequired();

                    b.Navigation("TeamTwo")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitites.Team", b =>
                {
                    b.Navigation("NewsList");
                });
#pragma warning restore 612, 618
        }
    }
}
